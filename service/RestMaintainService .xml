<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">



    <service verb="patch" noun="Party">
        <in-parameters>
            <auto-parameters entity-name="Party">
                <exclude field-name="lastUpdatedStamp"/>
            </auto-parameters>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="Party" value-field="existingRecord"/>
            <if condition="isEmpty(existingRecord)">
                <then>
                    <return message="PartyId doesn't Exist" type="warning"/>
                </then>
            </if>
            <set field="existingRecord.firstName" from="firstName"/>
            <set field="existingRecord.lastName" from="lastName"/>
            <entity-update value-field="existingRecord"/>
        </actions>
    </service>


          <

    <service verb="delete" noun="Party">
        <in-parameters>
            <auto-parameters entity-name="Party" include="pk"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="Party" value-field="existingParty"/>
            <if condition="isEmpty(existingParty)">
                <then>
                    <return message="PartyId doesn't Exist" type="warning"/>
                </then>
            </if>

            <entity-find entity-name="OrderHeader" list="orderList">
                <econdition field-name="partyId" from="existingParty.partyId"/>
            </entity-find>
            <log message="---------------List of Orders=${orderList}----------------"/>

            <iterate list="orderList" entry="order">
                <entity-find entity-name="OrderItem" list="itemList">
                    <econdition field-name="orderId" from="order.orderId"/>
                </entity-find>
                
                <iterate list="itemList" entry="item">
                    <entity-delete value-field="item"/>
                </iterate>
                
                <entity-delete value-field="order"/>
            </iterate>

            <entity-find entity-name="ContactMech" list="contactList">
                <econdition field-name="partyId" from="existingParty.partyId"/>
            </entity-find>
           

            <if condition="contactList">
                <then>
                    <iterate list="contactList" entry="contact">
                        <entity-delete value-field="contact"/>
                    </iterate>
                    
                </then>
            </if>

            <entity-delete value-field="existingParty"/>
        </actions>
    </service>

    <service verb="delete" noun="ContactMech">
        <in-parameters>
            <parameter name="partyId"/>
            <parameter name="contactMechId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="OrderHeader" list="recordByShippingId">
                <econdition field-name="shippingContactMechId" from="context.contactMechId"/>
            </entity-find>
            <iterate list="recordByShippingId" entry="order">
                <entity-delete value-field="order"/>
            </iterate>

            <entity-find entity-name="OrderHeader" list="recordByBillingId">
                <econdition field-name="billingContactMechId" from="context.contactMechId"/>
            </entity-find>
            <iterate list="recordByBillingId" entry="order">
                <entity-delete value-field="order"/>
            </iterate>
            <entity-delete-by-condition entity-name="ContactMech">
                <econdition field-name="contactMechId" from="context.contactMechId"/>
            </entity-delete-by-condition>
        </actions>
    </service>

    <service verb="delete" noun="Product">
        <in-parameters>
            <parameter name="productId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="Product" value-field="existingProduct"/>
            <entity-find entity-name="OrderItem" list="itemList">
                <econdition field-name="productId" from="existingProduct.productId"/>
            </entity-find>
            <iterate list="itemList" entry="item">
                <log message="-----------Order to delete is= ${item.orderId}--------"/>
                <service-call name="delete#Main" in-map="item.orderId"/>
            </iterate>
        </actions>
    </service>


    <service verb="delete" noun="OrderHeader">
        <in-parameters>
            <parameter name="orderId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId"/>
        </out-parameters>
        <actions>
            
            <service-call name="TutorialService.delete#OrderItem" in-map="context" out-map="result"/>
            <entity-delete-by-condition entity-name="OrderHeader">
                <econdition field-name="orderId" from="context.orderId"/>
            </entity-delete-by-condition>
        </actions>
    </service>


    <service verb="find" noun="OrderHeader">
        <in-parameters>
            <parameter name="orderId"/>
        </in-parameters>
        <out-parameters>
                <parameter name="order"/>
                <parameter name="itemList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="OrderItem" list="itemList">
                <econdition field-name="orderId" from="context.orderId"/>
            </entity-find>
                <entity-find-one entity-name="OrderHeader" value-field="order"/>
        </actions>
    </service>

    <service verb="delete" noun="OrderItem">
        <in-parameters>
            <auto-parameters entity-name="OrderItem" include="pk"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderItemSeqId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="OrderItem" list="itemList">
                <econdition field-name="orderId" from="context.orderId"/>
            </entity-find>
           
            <iterate list="itemList" entry="item">
                <entity-delete value-field="item"/>
              
            </iterate>
        </actions>
    </service>

    <service verb="patch" noun="OrderHeader">
        <in-parameters>
            <auto-parameters entity-name="OrderHeader"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="OrderHeader" value-field="recordToUpdate"/>
            
            <entity-find-one entity-name="ContactMech" value-field="existingRecord1">
                <field-map field-name="contactMechId" from="context.shippingContactMechId"/>
            </entity-find-one>
            <entity-find-one entity-name="ContactMech" value-field="existingRecord2">
                <field-map field-name="contactMechId" from="context.billingContactMechId"/>
            </entity-find-one>
            <if condition="!(existingRecord1.partyId==existingRecord2.partyId)">
                <then>
                    <return message="ContactMechId doesn't exist for this partyId" type="warning"/>
                </then>
            </if>
            <set field="recordToUpdate.shippingContactMechId" from="context.shippingContactMechId"/>
            <set field="recordToUpdate.billingContactMechId" from="context.billingContactMechId"/>
            <entity-update value-field="recordToUpdate"/>
           
        </actions>
    </service>
    
    <service verb="create" noun="OrderHeader">
       <in-parameters>
           <auto-parameters entity-name="OrderHeader" include="nonpk"/>
            <parameter name="listOfItems" type="List">
                <parameter name="orderItem" type="Map">
                    <parameter name="productId"/>
                    <parameter name="quantity"/>
                    <parameter name="status"/>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="finalMp"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="ContactMech" value-field="recordByShippingId">
                <field-map field-name="contactMechId" from="context.shippingContactMechId"/>
            </entity-find-one>

            <entity-find-one entity-name="ContactMech" value-field="recordByBillingId">
                <field-map field-name="contactMechId" from="context.billingContactMechId"/>
            </entity-find-one>

           

            <if condition="isEmpty(recordByShippingId)">
                <then>
                    <return message="Given ShippingContactId doesn't exist" type="warning"/>
                </then>
            </if>
            <if condition="(recordByBillingId==null)">
                <then>
                    <return message="Given BillingContactId doesn't exist" type="warning"/>
                </then>
            </if>
            <if condition="(recordByBillingId.partyId!=recordByShippingId.partyId)">
                <then>
                    <return message="No partyId exists for entered Shipping and Billing ID" type="warning"/>
                </then>
            </if>

            <service-call name="create#OrderHeader" in-map="context" out-map="mp"/>
            <iterate list="listOfItems" entry="item">
                <set field="item.orderId" value="${mp.orderId}"/>
                <service-call name="create#OrderItem" in-map="item" out-map="finalMp"/>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="OrderItem" type="entity-auto">
        <in-parameters>
            <auto-parameters entity-name="OrderItem" include="nonpk">
                <exclude field-name="lastUpdatedStamp"/>
            </auto-parameters>
        </in-parameters>
        <out-parameters>
            <parameter name="orderItemSeqId"/>
            <parameter name="orderId"/>
        </out-parameters>
    </service>
</services>
